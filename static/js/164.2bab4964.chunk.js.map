{"version":3,"file":"static/js/164.2bab4964.chunk.js","mappings":"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","sources":["components/CommonButtons.js","components/QuestionEditor.js"],"sourcesContent":["import React from 'react';\nimport { Button } from '@mui/material';\n\nexport const PrimaryButton = ({ children, ...props }) => (\n  <Button\n    variant=\"contained\"\n    color=\"primary\"\n    sx={{\n      fontWeight: 'bold',\n      padding: '10px 20px',\n      fontSize: '1rem',\n    }}\n    {...props}\n  >\n    {children}\n  </Button>\n);\n\nexport const SecondaryButton = ({ children, ...props }) => (\n  <Button\n    variant=\"outlined\"\n    color=\"primary\"\n    sx={{\n      fontWeight: 'bold',\n      padding: '10px 20px',\n      fontSize: '1rem',\n      borderWidth: 2,\n    }}\n    {...props}\n  >\n    {children}\n  </Button>\n);","import React, { useState } from 'react';\nimport { Dialog, DialogTitle, DialogContent, DialogActions, TextField, IconButton, Box, Grid } from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport DragIndicatorIcon from '@mui/icons-material/DragIndicator';\nimport { PrimaryButton, SecondaryButton } from './CommonButtons';\n\nconst QuestionEditor = ({ initialQuestions, onSave, onCancel }) => {\n  const [questions, setQuestions] = useState(initialQuestions);\n\n  const handleAddQuestion = () => {\n    setQuestions([...questions, { type: 'multiple-choice', text: '', options: [] }]);\n  };\n\n  const handleQuestionChange = (index, key, value) => {\n    const newQuestions = [...questions];\n    newQuestions[index][key] = value;\n    setQuestions(newQuestions);\n  };\n\n  const handleOptionChange = (qIndex, oIndex, value) => {\n    const newQuestions = [...questions];\n    newQuestions[qIndex].options[oIndex] = value;\n    setQuestions(newQuestions);\n  };\n\n  const handleAddOption = (qIndex) => {\n    const newQuestions = [...questions];\n    newQuestions[qIndex].options.push('');\n    setQuestions(newQuestions);\n  };\n\n  const handleRemoveQuestion = (index) => {\n    const newQuestions = [...questions];\n    newQuestions.splice(index, 1);\n    setQuestions(newQuestions);\n  };\n\n  const handleRemoveOption = (qIndex, oIndex) => {\n    const newQuestions = [...questions];\n    newQuestions[qIndex].options.splice(oIndex, 1);\n    setQuestions(newQuestions);\n  };\n\n  const handleDragEnd = (result) => {\n    if (!result.destination) return;\n    const items = Array.from(questions);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n    setQuestions(items);\n  };\n\n  return (\n    <Dialog open onClose={onCancel} fullWidth maxWidth=\"md\">\n      <DialogTitle>質問を編集</DialogTitle>\n      <DialogContent>\n        <DragDropContext onDragEnd={handleDragEnd}>\n          <Droppable droppableId=\"questions\">\n            {(provided) => (\n              <Box {...provided.droppableProps} ref={provided.innerRef}>\n                {questions.map((question, qIndex) => (\n                  <Draggable key={qIndex} draggableId={`question-${qIndex}`} index={qIndex}>\n                    {(provided) => (\n                      <Box\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        sx={{ mb: 3, p: 2, border: '1px solid #ccc', borderRadius: 2, backgroundColor: '#f9f9f9' }}\n                      >\n                        <Grid container alignItems=\"center\" spacing={1}>\n                          <Grid item>\n                            <IconButton {...provided.dragHandleProps}>\n                              <DragIndicatorIcon />\n                            </IconButton>\n                          </Grid>\n                          <Grid item xs>\n                            <TextField\n                              label={`質問 ${qIndex + 1} の内容`}\n                              variant=\"outlined\"\n                              fullWidth\n                              value={question.text}\n                              onChange={(e) => handleQuestionChange(qIndex, 'text', e.target.value)}\n                              placeholder=\"質問内容を入力してください\"\n                            />\n                            <Box sx={{ mt: 2 }}>\n                              {question.options.map((option, oIndex) => (\n                                <Grid container alignItems=\"center\" spacing={1} key={oIndex}>\n                                  <Grid item xs>\n                                    <TextField\n                                      label={`選択肢 ${oIndex + 1}`}\n                                      variant=\"outlined\"\n                                      fullWidth\n                                      value={option}\n                                      onChange={(e) => handleOptionChange(qIndex, oIndex, e.target.value)}\n                                      placeholder=\"選択肢を入力してください\"\n                                    />\n                                  </Grid>\n                                  <Grid item>\n                                    <IconButton onClick={() => handleRemoveOption(qIndex, oIndex)}>\n                                      <DeleteIcon />\n                                    </IconButton>\n                                  </Grid>\n                                </Grid>\n                              ))}\n                              <SecondaryButton startIcon={<AddIcon />} onClick={() => handleAddOption(qIndex)} sx={{ mt: 1 }}>\n                                選択肢を追加\n                              </SecondaryButton>\n                            </Box>\n                          </Grid>\n                          <Grid item>\n                            <IconButton onClick={() => handleRemoveQuestion(qIndex)}>\n                              <DeleteIcon />\n                            </IconButton>\n                          </Grid>\n                        </Grid>\n                      </Box>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </Box>\n            )}\n          </Droppable>\n        </DragDropContext>\n        <SecondaryButton startIcon={<AddIcon />} onClick={handleAddQuestion} sx={{ mt: 2 }}>\n          質問を追加\n        </SecondaryButton>\n      </DialogContent>\n      <DialogActions>\n        <SecondaryButton onClick={onCancel}>キャンセル</SecondaryButton>\n        <PrimaryButton onClick={() => onSave(questions)}>\n          保存\n        </PrimaryButton>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default QuestionEditor;"],"names":["PrimaryButton","_ref","children","props","_jsx","Button","variant","color","sx","fontWeight","padding","fontSize","SecondaryButton","_ref2","borderWidth","initialQuestions","onSave","onCancel","questions","setQuestions","useState","_jsxs","Dialog","open","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","DragDropContext","onDragEnd","result","destination","items","Array","from","reorderedItem","splice","source","index","Droppable","droppableId","provided","Box","droppableProps","ref","innerRef","map","question","qIndex","Draggable","draggableId","concat","draggableProps","mb","p","border","borderRadius","backgroundColor","Grid","container","alignItems","spacing","item","IconButton","dragHandleProps","DragIndicatorIcon","xs","TextField","label","value","text","onChange","e","handleQuestionChange","key","newQuestions","target","placeholder","mt","options","option","oIndex","handleOptionChange","onClick","handleRemoveOption","DeleteIcon","startIcon","AddIcon","push","handleAddOption","handleRemoveQuestion","handleAddQuestion","type","DialogActions"],"sourceRoot":""}