{"version":3,"file":"static/js/271.7cfef86e.chunk.js","mappings":"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","sources":["components/CommonButtons.js","components/VideoEditor.js"],"sourcesContent":["import React from 'react';\nimport { Button } from '@mui/material';\n\nexport const PrimaryButton = ({ children, ...props }) => (\n  <Button\n    variant=\"contained\"\n    color=\"primary\"\n    sx={{\n      fontWeight: 'bold',\n      padding: '10px 20px',\n      fontSize: '1rem',\n    }}\n    {...props}\n  >\n    {children}\n  </Button>\n);\n\nexport const SecondaryButton = ({ children, ...props }) => (\n  <Button\n    variant=\"outlined\"\n    color=\"primary\"\n    sx={{\n      fontWeight: 'bold',\n      padding: '10px 20px',\n      fontSize: '1rem',\n      borderWidth: 2,\n    }}\n    {...props}\n  >\n    {children}\n  </Button>\n);","import React, { useState } from 'react';\nimport { Dialog, DialogTitle, DialogContent, DialogActions, TextField, IconButton, Box, Grid } from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport DragIndicatorIcon from '@mui/icons-material/DragIndicator';\nimport { PrimaryButton, SecondaryButton } from './CommonButtons';\n\nconst VideoEditor = ({ initialVideos, onSave, onCancel }) => {\n  const [videos, setVideos] = useState(initialVideos);\n\n  const handleAddVideo = () => {\n    setVideos([...videos, { id: '', title: '' }]);\n  };\n\n  const handleVideoChange = (index, key, value) => {\n    const newVideos = [...videos];\n    newVideos[index][key] = value;\n    setVideos(newVideos);\n  };\n\n  const handleRemoveVideo = (index) => {\n    const newVideos = [...videos];\n    newVideos.splice(index, 1);\n    setVideos(newVideos);\n  };\n\n  const handleDragEnd = (result) => {\n    if (!result.destination) return;\n    const items = Array.from(videos);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n    setVideos(items);\n  };\n\n  return (\n    <Dialog open onClose={onCancel} fullWidth maxWidth=\"md\">\n      <DialogTitle>動画を編集</DialogTitle>\n      <DialogContent>\n        <DragDropContext onDragEnd={handleDragEnd}>\n          <Droppable droppableId=\"videos\">\n            {(provided) => (\n              <Box {...provided.droppableProps} ref={provided.innerRef}>\n                {videos.map((video, index) => (\n                  <Draggable key={index} draggableId={`video-${index}`} index={index}>\n                    {(provided) => (\n                      <Box\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        sx={{ mb: 3, p: 2, border: '1px solid #ccc', borderRadius: 2, backgroundColor: '#f9f9f9' }}\n                      >\n                        <Grid container alignItems=\"center\" spacing={1}>\n                          <Grid item>\n                            <IconButton {...provided.dragHandleProps}>\n                              <DragIndicatorIcon />\n                            </IconButton>\n                          </Grid>\n                          <Grid item xs>\n                            <TextField\n                              label={`動画 ${index + 1} のタイトル`}\n                              variant=\"outlined\"\n                              fullWidth\n                              value={video.title}\n                              onChange={(e) => handleVideoChange(index, 'title', e.target.value)}\n                              placeholder=\"動画タイトルを入力してください\"\n                            />\n                            <TextField\n                              label={`動画 ${index + 1} のID`}\n                              variant=\"outlined\"\n                              fullWidth\n                              value={video.id}\n                              onChange={(e) => handleVideoChange(index, 'id', e.target.value)}\n                              placeholder=\"動画IDを入力してください\"\n                              sx={{ mt: 1 }}\n                            />\n                          </Grid>\n                          <Grid item>\n                            <IconButton onClick={() => handleRemoveVideo(index)}>\n                              <DeleteIcon />\n                            </IconButton>\n                          </Grid>\n                        </Grid>\n                      </Box>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </Box>\n            )}\n          </Droppable>\n        </DragDropContext>\n        <SecondaryButton startIcon={<AddIcon />} onClick={handleAddVideo} sx={{ mt: 2 }}>\n          動画を追加\n        </SecondaryButton>\n      </DialogContent>\n      <DialogActions>\n        <SecondaryButton onClick={onCancel}>キャンセル</SecondaryButton>\n        <PrimaryButton onClick={() => onSave(videos)}>\n          保存\n        </PrimaryButton>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default VideoEditor;"],"names":["PrimaryButton","_ref","children","props","_jsx","Button","variant","color","sx","fontWeight","padding","fontSize","SecondaryButton","_ref2","borderWidth","initialVideos","onSave","onCancel","videos","setVideos","useState","handleVideoChange","index","key","value","newVideos","_jsxs","Dialog","open","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","DragDropContext","onDragEnd","result","destination","items","Array","from","reorderedItem","splice","source","Droppable","droppableId","provided","Box","droppableProps","ref","innerRef","map","video","Draggable","draggableId","concat","draggableProps","mb","p","border","borderRadius","backgroundColor","Grid","container","alignItems","spacing","item","IconButton","dragHandleProps","DragIndicatorIcon","xs","TextField","label","title","onChange","e","target","placeholder","id","mt","onClick","handleRemoveVideo","DeleteIcon","startIcon","AddIcon","handleAddVideo","DialogActions"],"sourceRoot":""}